package p1nata.p1n;

import java.util.List;
import java.util.Stack;

import android.app.ActionBar;
import android.app.Activity;
import android.app.Fragment;
import android.app.FragmentManager;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.widget.DrawerLayout;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.WindowManager.LayoutParams;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;

public class P1Nmain extends Activity implements NavigationDrawerFragment.NavigationDrawerCallbacks {
	public static final int REQUEST_ENABLE_BT = 123456;
	/**
	 * Fragment managing the behaviors, interactions and presentation of the
	 * navigation drawer.
	 */
	private NavigationDrawerFragment mNavigationDrawerFragment;
	/**
	 * Used to store the last screen title. For use in
	 * {@link #restoreActionBar()}.
	 */
	private CharSequence mTitle;
	private Stack<Fragment> goBack;
	private P1NIO io = new P1NIO(this);
	private P1NErrors err = new P1NErrors(this);

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_p1_nmain);

		mNavigationDrawerFragment = (NavigationDrawerFragment) getFragmentManager()
				.findFragmentById(R.id.navigation_drawer);
		mTitle = getTitle();

		// Set up the drawer.
		mNavigationDrawerFragment.setUp(R.id.navigation_drawer, (DrawerLayout) findViewById(R.id.drawer_layout));
	}

	@Override
	public void onNavigationDrawerItemSelected(int position) {
		// update the main content by replacing fragments
		setFragment(PlaceholderFragment.newInstance(position + 1, this));
	}

	public void onSectionAttached(int number) {
		switch (number) {
		case 1:
			mTitle = getString(R.string.title_section1);
			break;
		case 2:
			mTitle = getString(R.string.title_section2);
			break;
		}
	}

	public void restoreActionBar() {
		ActionBar actionBar = getActionBar();
		actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);
		actionBar.setDisplayShowTitleEnabled(true);
		actionBar.setTitle(mTitle);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		if (!mNavigationDrawerFragment.isDrawerOpen()) {
			// Only show items in the action bar relevant to this screen
			// if the drawer is not showing. Otherwise, let the drawer
			// decide what to show in the action bar.
			getMenuInflater().inflate(R.menu.p1_nmain, menu);
			restoreActionBar();
			return true;
		}
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	public void checkBluetoothEnabled() {
		BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
		if (mBluetoothAdapter == null) {
			err.bluetoothNotFound(this);
			return;
		}
		if (!mBluetoothAdapter.isEnabled()) {
			Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
			startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
		}
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		switch (requestCode) {
		case REQUEST_ENABLE_BT:
			if (resultCode != Activity.RESULT_OK) {
				err.bluetoothNotEnabled(this);
				return;
			}
			break;
		}
	}

	protected void processDoor(DoorInfo doorInfo) {
		getFragmentManager().beginTransaction().replace(R.id.container, new DoorUI(doorInfo)).commit();
	}

	private void setFragment(Fragment f) {
		FragmentManager fragmentManager = getFragmentManager();
		fragmentManager.beginTransaction().replace(R.id.container, f).commit();

	}

	@Override
	public void onBackPressed() {
		if (goBack.isEmpty())
			super.onBackPressed();

	}

	/**
	 * A placeholder fragment containing a simple view.
	 */
	public static class PlaceholderFragment extends Fragment {
		/**
		 * The fragment argument representing the section number for this
		 * fragment.
		 */
		private static final String ARG_SECTION_NUMBER = "section_number";

		/**
		 * Returns a new instance of this fragment for the given section number.
		 */
		public static PlaceholderFragment newInstance(int sectionNumber, P1Nmain io) {
			PlaceholderFragment fragment = new PlaceholderFragment(io);
			Bundle args = new Bundle();
			args.putInt(ARG_SECTION_NUMBER, sectionNumber);
			fragment.setArguments(args);
			return fragment;
		}

		private P1Nmain main;

		public PlaceholderFragment(P1Nmain main) {
			this.main = main;
		}

		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {

			View rootView = inflater.inflate(getLayout(), container, false);
			switch (getLayout()) {
			case R.layout.doors:
				loadDoors(rootView);
				break;
			case R.layout.addnewmasterkey:
				addNewMasterKey(rootView);
			}
			return rootView;
		}

		private void addNewMasterKey(final View rootView) {
			final Spinner sp = (Spinner) rootView.findViewById(R.id.spinner1);
			final BluetoothDevice[] devices = BluetoothAdapter.getDefaultAdapter().getBondedDevices()
					.toArray(new BluetoothDevice[0]);
			String[] data = new String[devices.length + 1];
			data[0] = "Select a bluetooth device";
			for (int i = 0; i < devices.length; i++) {
				data[i + 1] = devices[i].getName();
			}
			ArrayAdapter<String> aas = new ArrayAdapter<String>(getActivity(), android.R.layout.simple_spinner_item,
					data);
			sp.setAdapter(aas);
			Button b = (Button) rootView.findViewById(R.id.button1);
			b.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					String doorName = ((EditText) rootView.findViewById(R.id.editText1)).getText().toString().trim();
					if (doorName.equals("")) {
						main.err.nameMustNotBeEmpty();
						return;
					}
					String sMasterKey = ((EditText) rootView.findViewById(R.id.editText2)).getText().toString();
					int masterKey;
					try {
						masterKey = Integer.parseInt(sMasterKey);
					} catch (NumberFormatException e) {
						main.err.needMasterKey();
						return;
					}
					int selected = sp.getSelectedItemPosition();
					if (selected == 0) {
						main.err.needToSelectABluetoothDevice();
						return;
					}
					BluetoothDevice device = devices[selected - 1];
					main.io.writeDoor(doorName, masterKey, device);
					main.onNavigationDrawerItemSelected(0);
				}
			});
		}

		private void loadDoors(final View rootView) {
			LinearLayout ll = (LinearLayout) rootView.findViewById(R.id.linearLayout);
			final List<DoorInfo> dis = main.io.readDoors();
			if (dis.size() == 0) {
				TextView tv = new TextView(main);
				LayoutParams lp = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
				tv.setText("You have no doors. Please go to 'Add New Door' to add a new door.");
				lp.horizontalMargin = 200;
				tv.setLayoutParams(lp);
				ll.addView(tv);
			}
			OnClickListener ocl = new OnClickListener() {
				@Override
				public void onClick(View v) {
					main.processDoor(dis.get(v.getId()));
				}
			};
			for (int i = 0; i < dis.size(); i++) {
				Button b = new Button(getActivity());
				LayoutParams lp = new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
				lp.horizontalMargin = 10;
				lp.verticalMargin = 5;
				lp.gravity = Gravity.CENTER;
				b.setLayoutParams(lp);
				b.setTextSize(30);
				b.setHeight(250);
				b.setId(i);
				b.setText(dis.get(i).name);
				b.setOnClickListener(ocl);
				ll.addView(b);
			}
		}

		@Override
		public void onAttach(Activity activity) {
			super.onAttach(activity);
			((P1Nmain) activity).onSectionAttached(getSection());
		}

		public int getLayout() {
			switch (getSection()) {
			case 1:
				return R.layout.doors;
			case 2:
				return R.layout.addnewmasterkey;
			default:
				throw new IllegalArgumentException();
			}
		}

		public int getSection() {
			return getArguments().getInt(ARG_SECTION_NUMBER);
		}
	}

}
